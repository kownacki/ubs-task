{"version":3,"sources":["components/Header.tsx","redux/actionTypes.ts","utils.ts","redux/actions.ts","constants.ts","components/Section.tsx","components/form-elements/FormLine.tsx","components/form-elements/FormBlock.ts","components/form-elements/Input.tsx","components/form-elements/TextArea.tsx","redux/selectors.ts","components/form-elements/Select.tsx","components/sections/AboutSection/Categories.tsx","components/form-elements/Radio.tsx","types.ts","components/sections/AboutSection/Payment.tsx","components/sections/AboutSection/index.tsx","components/sections/CoordinatorSection.tsx","components/sections/WhenSection.tsx","components/Submit.tsx","components/Validated.tsx","components/Contents.tsx","redux/reducers/downloadedData.ts","redux/reducers/index.ts","redux/store.ts","components/App.tsx","index.tsx"],"names":["Root","styled","div","Heading","h1","Header","DOWNLOADED_DATA_FAILURE","DOWNLOADED_DATA_SUCCESS","fetchData","path","a","fetch","response","ok","json","data","isSuccess","handleDownloadedDataFailure","dataName","type","handleDownloadedDataSuccess","downloadData","dispatch","pathToData","fetchResult","Container","h2","Contents","Section","title","children","Label","ContentsContainer","FormLine","label","required","FormBlock","span","Input","input","props","width","css","TextAreaElement","textarea","Counter","TextArea","useState","charCount","setCharCount","onChange","event","target","value","length","maxLength","selectCategories","state","downloadedData","categories","selectCoordinators","coordinators","Wrapper","SelectElement","select","Select","Categories","useSelector","name","hidden","map","category","index","id","key","DownloadStatus","Radio","attrs","Payment","isPaidEvent","setIsPaidEvent","handlePaymentChange","defaultChecked","htmlFor","placeholder","min","step","AboutSection","rows","composeCoordinatorName","coordinator","lastname","CoordinatorSection","emailInput","createRef","userCoordinator","find","email","coordinatorsWithoutUser","without","status","Success","selectedCoordinator","Number","current","ref","data-test","WhenSection","Submit","Validated","Form","form","SubmitContainer","useDispatch","useEffect","isValidated","setIsValidated","onSubmit","preventDefault","formElement","document","getElementById","output","formData","rawOutput","forEach","paid_event","description","category_id","event_fee","reward","date","date_day","date_time","duration","coordinator_id","coordinator_email","formDataToOutput","FormData","console","log","initialState","Loading","createReducer","resp","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.de8e1d65.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  background: var(--primary-color);\n  border-top: solid 8px var(--primary-color-dark);\n  margin-bottom: 28px;\n`;\n\nconst Heading = styled.h1`\n  max-width: 820px;\n  color: #ffffff;\n  font-weight: normal;\n  font-size: 28px;\n  margin: auto;\n  padding: 16px 20px\n`;\n\nexport const Header: FC = () => {\n  return (\n    <Root>\n      <Heading>New event</Heading>\n    </Root>\n  );\n};\n","export const DOWNLOADED_DATA_FAILURE = 'DOWNLOADED_DATA_FAILURE';\nexport const DOWNLOADED_DATA_SUCCESS = 'DOWNLOADED_DATA_SUCCESS';\n","import { Output } from './types';\n\nexport const formDataToOutput = (formData: FormData) => {\n  const rawOutput:Record<string, string> = {};\n\n  formData.forEach((value, key) => rawOutput[key] = value as string);\n\n  // rawOutput has only strings inside and different structure than desired output. Thus we need to transform some of them.\n  const isPaidEvent = rawOutput.paid_event === 'paid';\n  const output: Output = {\n    title: rawOutput.title,\n    description: rawOutput.description,\n    category_id: Number(rawOutput.category_id),\n    paid_event: isPaidEvent,\n    ...(isPaidEvent ? { event_fee: Number(rawOutput.event_fee) } : {}),\n    reward: Number(rawOutput.reward),\n    date: `${rawOutput.date_day}T${rawOutput.date_time}`,\n    duration: Number(rawOutput.duration) * 3600,\n    coordinator: { id: rawOutput.coordinator_id, email: rawOutput.coordinator_email }\n  }\n  return output;\n}\n\nexport const fetchData = async (path: string) => {\n  const response = await fetch(path);\n  return response.ok\n      ? { data: await response.json(), isSuccess: true }\n      : { isSuccess: false };\n};\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { DOWNLOADED_DATA_FAILURE, DOWNLOADED_DATA_SUCCESS } from './actionTypes';\nimport { DataName, RootState } from '../types';\nimport { CATEGORIES_PATH, COORDINATORS_PATH } from '../constants';\nimport { fetchData } from '../utils';\n\nexport const handleDownloadedDataFailure = (dataName: DataName) => ({ type: DOWNLOADED_DATA_FAILURE, dataName });\nexport const handleDownloadedDataSuccess = <Data>(dataName: DataName, data: Data) => ({ type: DOWNLOADED_DATA_SUCCESS, dataName, data });\n\ntype AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n\nexport const downloadData = (dataName: DataName): AppThunk => {\n  return async (dispatch) => {\n    const pathToData = dataName === 'categories' ? CATEGORIES_PATH : COORDINATORS_PATH;\n    const fetchResult = await fetchData(pathToData);\n    if (fetchResult.isSuccess) {\n      dispatch(handleDownloadedDataSuccess(dataName, fetchResult.data));\n    } else {\n      dispatch(handleDownloadedDataFailure(dataName));\n    }\n  }\n};\n\n","export const USER_EMAIL = 'walter.nelson@hussa.rs';\n\nexport const CATEGORIES_PATH = 'https://www.mocky.io/v2/5bcdd3942f00002c00c855ba';\nexport const COORDINATORS_PATH = 'https://www.mocky.io/v2/5bcdd7992f00006300c855d5';\n","import React, { FC, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  box-shadow: var(--box-shadow);\n  padding: 12px 0;\n  background: #ffffff;\n`;\n\nconst Container = styled.div`\n  max-width: 820px;\n  padding: 0 20px;\n  margin: auto;\n`;\n\nconst Header = styled.div`\n  border-bottom: solid 1px var(--dark-grey);\n  margin-bottom: 32px;\n`;\n\nconst Heading = styled.h2`\n  font-weight: normal;\n  font-size: 24px;\n  padding: 8px 0;\n  color: var(--primary-color);\n`;\n\nconst Contents = styled.div`\n  max-width: 660px;\n  \n  & > * {\n    margin-bottom: 14px;\n  }\n`;\n\nexport interface SectionProps {\n  title: string;\n  children?: ReactNode;\n}\n\nexport const Section: FC<SectionProps> = ({ title, children }) => {\n  return (\n    <Root>\n      <Container>\n        <Header>\n          <Heading>{title}</Heading>\n        </Header>\n        <Contents>\n          {children}\n        </Contents>\n      </Container>\n    </Root>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  display: flex;\n  \n  @media (max-width: 599px) {\n    display: block;\n  }\n`;\n\nconst Label = styled.div`\n  width: 160px;\n  text-transform: uppercase;\n  color: var(--primary-color);\n  padding: 10px 0 12px;\n`;\n\nconst ContentsContainer = styled.div`\n  flex: 1;\n\n  & > * {\n    margin-bottom: 2px;\n  }\n\n  & > *:not(:last-child) {\n    margin-right: 12px;\n  }\n`;\n\nexport interface FormLineProps {\n  label: string;\n  required?: boolean;\n  children?: ReactNode;\n}\n\nexport const FormLine: FC<FormLineProps> = ({ label, required, children }) => {\n  return (\n    <Root>\n      <Label>{`${label}${required ? ' *': ''}`}</Label>\n      <ContentsContainer>\n        {children}\n      </ContentsContainer>\n    </Root>\n  );\n};\n","import styled  from 'styled-components';\n\nexport const FormBlock = styled.span`\n  display: inline-block;\n  line-height: 36px;\n  height: 36px;\n`;\n","import styled, { css } from 'styled-components';\n\nexport const Input = styled.input<{width?: string}>`\n  border: solid 1px var(--dark-grey);\n  font: var(--input-font-size) Arial;\n  height: 36px;\n  padding: 0 8px;\n  box-sizing: border-box;\n\n  ${(props) => props.width && css`\n    width: ${props.width};\n  `}\n`;\n","import React, { FC, TextareaHTMLAttributes, useState } from 'react';\nimport styled from 'styled-components';\n\nconst TextAreaElement = styled.textarea`\n  display: block;\n  border: solid 1px var(--dark-grey);\n  font: var(--input-font-size) Arial;\n  resize: none;\n  padding: 8px;\n  box-sizing: border-box;\n  width: 100%;\n`;\n\nconst Counter = styled.div`\n  font-size: 12px;\n  text-align: right;\n  margin-top: 4px;\n`;\n\nexport const TextArea: FC<TextareaHTMLAttributes<HTMLTextAreaElement>> = (props) => {\n  const [charCount, setCharCount] = useState(0);\n\n  return (\n    <div>\n      <TextAreaElement onChange={(event) => setCharCount(event.target.value.length)} {...props} />\n        {props.maxLength && (\n          <Counter>\n            {`${charCount} / ${props.maxLength}`}\n          </Counter>\n        )}\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { RootState } from '../types';\n\nconst selectCategories = (state: RootState) => state.downloadedData.categories;\nexport const useCategories = () => useSelector(selectCategories);\n\nconst selectCoordinators = (state: RootState) => state.downloadedData.coordinators;\nexport const useCoordinators = () => useSelector(selectCoordinators);\n","import React, { FC, SelectHTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\n// Html select doesn't allow :before pseudo element, thus a wrapper is required\nconst Wrapper = styled.div`\n  position: relative;\n  height: 36px;\n\n  &:before {\n    --size: 6px;\n    content: \"\";\n    display: block;\n    position: absolute;\n    top: calc(50% - var(--size)/2);\n    right: 12px;\n    border-left: var(--size) solid transparent;\n    border-right: var(--size) solid transparent;\n    border-top: var(--size) solid #000000;\n    pointer-events: none;\n  }\n`;\n\nconst SelectElement = styled.select`\n  border: solid 1px var(--dark-grey);\n  padding: 8px;\n  box-sizing: border-box;\n  width: 100%;\n  appearance: none;\n`;\n\nexport const Select: FC<SelectHTMLAttributes<HTMLSelectElement>> = (props) => {\n  return (\n    <Wrapper>\n      <SelectElement {...props} />\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { useCategories } from '../../../redux/selectors';\nimport { FormLine } from '../../form-elements/FormLine';\nimport { Select } from '../../form-elements/Select';\n\nexport const Categories: FC = () => {\n  const categories = useCategories();\n\n  return (\n    <FormLine label=\"Category\">\n      <Select name=\"category_id\">\n        <option value=\"\" hidden>Select category</option>\n        {categories.data.map((category, index) => (\n          <option value={category.id} key={index}>{category.name}</option>\n        ))}\n      </Select>\n    </FormLine>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Radio = styled.input.attrs({ type: 'radio' })`\n  appearance: none;\n  position: relative;\n  top: 2px;\n  margin: 8px 8px 0 0;\n  width: 16px;\n  height: 16px;\n\n  &:before, &:after {\n    content: \"\";\n    display: block;\n    border-radius: 100%;\n    transition: all 100ms linear;\n  }\n\n  /* outer dot */\n  &:before {\n    border-width: 1px;\n    border-style: solid;\n    border-color: var(--font-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  /* inner dot */\n  &:after {\n    width: 8px;\n    height: 8px;\n    margin: 4px;\n    background-color: var(--primary-color);\n    position: relative;\n    opacity: 0;\n  }\n  \n  &:checked {\n    &:before {\n      border-color: var(--primary-color);\n    }\n    &:after {\n      opacity: 1;\n    }\n  }\n`;\n","export enum DownloadStatus {\n  Loading,\n  Failure,\n  Success,\n}\n\n\nexport interface Category {\n  id: number;\n  name: string;\n}\n\nexport interface Coordinator {\n  id: number;\n  name: string;\n  lastname: string;\n  email: string;\n}\n\nexport type DataName = 'categories' | 'coordinators';\nexport type Data = Category[] | Coordinator[];\n\nexport interface DownloadedData<T> {\n  status: DownloadStatus;\n  data: T;\n}\n\nexport interface DownloadedDataState {\n  categories: DownloadedData<Category[]>;\n  coordinators: DownloadedData<Coordinator[]>;\n}\n\nexport interface RootState {\n  downloadedData: DownloadedDataState;\n}\n\nexport interface Output {\n  title: string;\n  description: string;\n  category_id: number;\n  paid_event: boolean;\n  event_fee?: number;\n  reward: number;\n  date: string, // YYYY-MM-DDTHH:mm (example: 2018-01-19T15:15)\n  duration: number; // in seconds\n  coordinator: {\n    email: string;\n    id: string;\n  },\n}","import React, { FC, useState } from 'react';\nimport { FormLine } from '../../form-elements/FormLine';\nimport { FormBlock } from '../../form-elements/FormBlock';\nimport { Input } from '../../form-elements/Input';\nimport { Radio } from '../../form-elements/Radio';\n\nexport const Payment: FC = () => {\n  const [isPaidEvent, setIsPaidEvent] = useState(false);\n\n  const handlePaymentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n   setIsPaidEvent(event.target.value === 'paid');\n  };\n\n  return (\n    <FormLine label=\"Payment\">\n      <FormBlock>\n        <Radio name=\"paid_event\" value=\"free\" id=\"free\" onChange={handlePaymentChange} defaultChecked />\n        <label htmlFor=\"free\">Free event</label>\n      </FormBlock>\n      <FormBlock>\n        <Radio name=\"paid_event\" value=\"paid\" id=\"paid\" onChange={handlePaymentChange} />\n        <label htmlFor=\"paid\">Paid event</label>\n      </FormBlock>\n      {isPaidEvent && (\n        <>\n          <Input\n            placeholder=\"Fee\"\n            type=\"number\"\n            min=\"0\"\n            step=\"1\"\n            name=\"event_fee\"\n            width=\"90px\"\n          />\n          <FormBlock>$</FormBlock>\n        </>\n      )}\n    </FormLine>\n  );\n};\n","import React, { FC } from 'react';\nimport { Section } from '../../Section';\nimport { FormLine } from '../../form-elements/FormLine';\nimport { FormBlock } from '../../form-elements/FormBlock';\nimport { Input } from '../../form-elements/Input';\nimport { TextArea } from '../../form-elements/TextArea';\nimport { Categories } from './Categories';\nimport { Payment } from './Payment';\n\nexport const AboutSection: FC = () => {\n  return (\n    <Section title=\"About\">\n      <FormLine label=\"Title\" required>\n        <Input\n          placeholder=\"Make it short and clear\"\n          name=\"title\"\n          width=\"100%\"\n          required\n        />\n      </FormLine>\n      <FormLine label=\"Description\" required>\n        <TextArea\n          placeholder=\"Write about your event, be creative\"\n          rows={8}\n          name=\"description\"\n          maxLength={140}\n          required\n        />\n      </FormLine>\n      <Categories />\n      <Payment />\n      <FormLine label=\"Reward\">\n        <Input\n          type=\"number\"\n          min={0}\n          placeholder=\"Number\"\n          name=\"reward\"\n          width=\"90px\"\n        />\n        <FormBlock>reward points for attendance</FormBlock>\n      </FormLine>\n    </Section>\n  );\n};\n","import React, { FC, createRef } from 'react';\nimport { without } from 'lodash';\nimport { useCoordinators } from '../../redux/selectors';\nimport { USER_EMAIL } from '../../constants';\nimport { DownloadStatus, Coordinator } from '../../types';\nimport { Section } from '../Section';\nimport { FormLine } from '../form-elements/FormLine';\nimport { Input } from '../form-elements/Input';\nimport { Select } from '../form-elements/Select';\n\nconst composeCoordinatorName = (coordinator: Coordinator) => `${coordinator.name} ${coordinator.lastname}`;\n\nexport const CoordinatorSection: FC = () => {\n  const coordinators = useCoordinators();\n  const emailInput = createRef<HTMLInputElement>();\n\n  // We assume that the user is always among coordinators\n  const userCoordinator = coordinators.data.find((coordinator) => coordinator.email === USER_EMAIL) as Coordinator;\n  const coordinatorsWithoutUser = without(coordinators.data, userCoordinator);\n\n  const handleCoordinatorChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedCoordinator = coordinators.data.find((coordinator) => coordinator.id === Number(event.target.value)) as Coordinator;\n    if (emailInput.current) {\n      emailInput.current.value = selectedCoordinator.email;\n    }\n  };\n\n  return (\n    <Section title=\"Coordinator\">\n      <FormLine label=\"Responsible\" required>\n        {coordinators.status === DownloadStatus.Success && (\n          <Select name=\"coordinator_id\" onChange={handleCoordinatorChange} required>\n            <option value=\"\" hidden>Select coordinator</option>\n            <optgroup label=\"Me\">\n              <option value={userCoordinator.id}>{composeCoordinatorName(userCoordinator)}</option>\n            </optgroup>\n            <optgroup label=\"Others\">\n              {coordinatorsWithoutUser.map((coordinator, index) => (\n                <option value={coordinator.id} key={index}>{composeCoordinatorName(coordinator)}</option>\n              ))}\n            </optgroup>\n          </Select>\n        )}\n      </FormLine>\n      <FormLine label=\"Email\">\n        <Input\n          name=\"coordinator_email\"\n          type=\"email\"\n          width=\"100%\"\n          placeholder=\"Email\"\n          ref={emailInput}\n          data-test=\"email-input\"\n          required\n        />\n      </FormLine>\n    </Section>\n  );\n};\n","import React, { FC } from 'react';\nimport { Section } from '../Section';\nimport { FormLine } from '../form-elements/FormLine';\nimport { FormBlock } from '../form-elements/FormBlock';\nimport { Input } from '../form-elements/Input';\n\nexport const WhenSection: FC = () => {\n  return (\n    <Section title=\"When\">\n      <FormLine label=\"Starts on\" required>\n        <Input type=\"date\" name=\"date_day\" required />\n        <FormBlock>at</FormBlock>\n        <Input type=\"time\" name=\"date_time\" required />\n      </FormLine>\n      <FormLine label=\"Duration\">\n        <Input\n          type=\"number\"\n          min={0}\n          placeholder=\"Number\"\n          name=\"duration\"\n          width=\"90px\"\n        />\n        <FormBlock>hour</FormBlock>\n      </FormLine>\n    </Section>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Submit = styled.input.attrs({ type: 'submit' })`\n  color: #ffffff;\n  background: var(--accent-color);\n  border: none;\n  padding: 16px 32px;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-color ease 0.3s;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n","import styled from 'styled-components';\nimport React, { FC } from 'react';\n\nconst Root = styled.div`\n  background: var(--validated-background);\n  box-shadow: var(--box-shadow);\n  padding: 12px 40px 20px;\n`;\n\nconst Heading = styled.h2`\n  font-weight: normal;\n  font-size: 24px;\n  padding: 8px 0;\n  color: var(--validated-color);\n`;\n\nexport const Validated: FC = () => {\n  return (\n    <Root>\n      <Heading>Success</Heading>\n      Event has been created.\n    </Root>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { downloadData } from '../redux/actions';\nimport { formDataToOutput } from '../utils';\nimport { AboutSection } from './sections/AboutSection';\nimport { CoordinatorSection } from './sections/CoordinatorSection';\nimport { WhenSection } from './sections/WhenSection';\nimport { Submit } from './Submit';\nimport { Validated } from './Validated';\n\nconst Root = styled.div`\n  max-width: 900px;\n  margin: auto;\n`;\n\nconst Form = styled.form`\n  & > * {\n    margin-bottom: 20px;\n  }\n`;\n\nconst SubmitContainer = styled.div`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const Contents: FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(downloadData('categories'));\n    dispatch(downloadData('coordinators'));\n  }, [dispatch]);\n\n  const [isValidated, setIsValidated] = useState(false);\n\n  const handlePublish = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formElement = document.getElementById('form') as HTMLElement;\n    const formData = (new FormData(formElement as HTMLFormElement));\n    const output = formDataToOutput(formData);\n\n    setIsValidated(true);\n\n    console.log(output);\n  };\n\n  return (\n    <Root>\n      {!isValidated ? (\n        <Form id=\"form\" onSubmit={handlePublish}>\n          <AboutSection />\n          <CoordinatorSection />\n          <WhenSection />\n          <SubmitContainer>\n            <Submit value=\"Publish Event\" />\n          </SubmitContainer>\n        </Form>\n      ) : (\n        <Validated />\n      )}\n    </Root>\n  );\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { DownloadedDataState, DownloadStatus, Data, DataName } from '../../types';\nimport { DOWNLOADED_DATA_FAILURE, DOWNLOADED_DATA_SUCCESS } from '../actionTypes';\n\nexport const initialState: DownloadedDataState = {\n  categories: {\n    status: DownloadStatus.Loading,\n    data: [],\n  },\n  coordinators: {\n    status: DownloadStatus.Loading,\n    data: [],\n  },\n};\n\nexport const downloadedData = createReducer(\n  initialState,\n  {\n    [DOWNLOADED_DATA_FAILURE]: (\n        state: DownloadedDataState,\n        resp: {\n          dataName: DataName,\n        }\n    ) => ({\n      ...state,\n      [resp.dataName]: {\n        status: DownloadStatus.Success,\n      }\n    }),\n    [DOWNLOADED_DATA_SUCCESS]: (\n        state: DownloadedDataState,\n        resp: {\n          dataName: DataName,\n          data: Data,\n        }\n    ) => ({\n      ...state,\n      [resp.dataName]: {\n        status: DownloadStatus.Success,\n        data: resp.data,\n      }\n    }),\n  },\n);\n","import { combineReducers } from 'redux';\nimport { downloadedData } from './downloadedData';\n\nexport const reducers = combineReducers({ downloadedData });\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport { reducers } from './reducers';\n\nexport const store = createStore(\n  reducers,\n  applyMiddleware(thunkMiddleware),\n);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport '../index.css';\nimport { Header } from './Header';\nimport { Contents } from './Contents';\nimport { store } from '../redux/store';\n\nexport const App: FC = () => {\n  return (\n    <Provider store={store}>\n      <Header />\n      <Contents />\n    </Provider>\n  );\n};\n","// istanbul ignore file\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}